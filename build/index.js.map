{"version":3,"file":"index.js","mappings":"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","sources":["webpack://wp-ai-image-gen/./src/core-image-modifications.js","webpack://wp-ai-image-gen/external window \"React\"","webpack://wp-ai-image-gen/external window [\"wp\",\"blockEditor\"]","webpack://wp-ai-image-gen/external window [\"wp\",\"components\"]","webpack://wp-ai-image-gen/external window [\"wp\",\"data\"]","webpack://wp-ai-image-gen/external window [\"wp\",\"element\"]","webpack://wp-ai-image-gen/external window [\"wp\",\"hooks\"]","webpack://wp-ai-image-gen/external window [\"wp\",\"richText\"]","webpack://wp-ai-image-gen/webpack/bootstrap","webpack://wp-ai-image-gen/webpack/runtime/compat get default export","webpack://wp-ai-image-gen/webpack/runtime/define property getters","webpack://wp-ai-image-gen/webpack/runtime/hasOwnProperty shorthand","webpack://wp-ai-image-gen/webpack/runtime/make namespace object"],"sourcesContent":["// Import necessary WordPress components and hooks\nimport { addFilter } from '@wordpress/hooks';\nimport { useState, useEffect } from '@wordpress/element';\nimport { Button, TextareaControl, Modal, Spinner, SelectControl, ToolbarButton, Icon } from '@wordpress/components';\nimport { registerFormatType, toggleFormat } from '@wordpress/rich-text';\nimport { BlockControls } from '@wordpress/block-editor';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport { useCallback } from '@wordpress/element';\nimport { InspectorControls } from '@wordpress/block-editor';\nimport { PanelBody } from '@wordpress/components';\nimport { ToolbarGroup } from '@wordpress/components';\n\n/**\n * Fetches available providers from the server.\n * @returns {Promise<Object>} A promise that resolves to an object of provider IDs and names.\n */\nconst fetchProviders = async () => {\n    try {\n        const response = await wp.apiFetch({ path: '/wp-ai-image-gen/v1/providers' });\n        return response;\n    } catch (error) {\n        console.error('Error fetching providers:', error);\n        // Return an object with an error message that can be displayed to the user\n        return { error: 'Unable to fetch providers. Please try again later.' };\n    }\n};\n\n/**\n * Generates an AI image based on the given prompt and provider.\n * @param {string} prompt - The text prompt for image generation.\n * @param {string} provider - The selected provider ID.\n * @param {function} callback - Function to handle the generated image data.\n */\nconst generateImage = async (prompt, provider, callback) => {\n    try {        \n        // Call the WordPress API to generate the image\n        const response = await wp.apiFetch({\n            path: '/wp-ai-image-gen/v1/generate-image',\n            method: 'POST',\n            data: { prompt, provider },\n        });\n\n        // If the response contains a valid URL, call the callback with image data\n        if (response && response.url) {\n            callback({\n                url: response.url,\n                alt: prompt,\n                id: response.id || `ai-generated-${Date.now()}`, // Fallback ID if not provided\n                caption: '',\n            });\n        } else {\n            // Check for NSFW content error\n            if (response && response.error && response.error.includes('NSFW content')) {\n                throw new Error('The image could not be generated due to potential inappropriate content. Please try a different prompt.');\n            } else {\n                throw new Error('Invalid response from server: ' + JSON.stringify(response));\n            }\n        }\n    } catch (error) {\n        // Log the detailed error and call the callback with an error object\n        console.error('Detailed error in generateImage:', error);\n        if (error.message) console.error('Error message:', error.message);\n        if (error.stack) console.error('Error stack:', error.stack);\n        callback({ error: error.message || 'Unknown error occurred' });\n    }\n};\n\n/**\n * AITab component for generating AI images\n * @param {Object} props - Component props\n * @param {function} props.onSelect - Function to handle selected image\n */\nconst AITab = ({ onSelect }) => {\n    // State hooks for modal, prompt, loading status, providers, and selected provider\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [prompt, setPrompt] = useState('');\n    const [isLoading, setIsLoading] = useState(false);\n    const [providers, setProviders] = useState({});\n    const [selectedProvider, setSelectedProvider] = useState('');\n    const [error, setError] = useState(null);\n\n    // Add a new state hook for the last used provider\n    const [lastUsedProvider, setLastUsedProvider] = useState('');\n\n    // Fetch providers and last used provider when component mounts\n    useEffect(() => {\n        fetchProviders().then((result) => {\n            if (result.error) {\n                setError(result.error);\n            } else {\n                setProviders(result);\n            \n                // Retrieve the last used provider from local storage\n                const storedProvider = localStorage.getItem('wpAiImageGenLastProvider');\n                if (storedProvider && result[storedProvider]) {\n                    setSelectedProvider(storedProvider);\n                    setLastUsedProvider(storedProvider);\n                } else {\n                    // If no stored provider or it's invalid, use the first available provider\n                    setSelectedProvider(Object.keys(result)[0]);\n                }\n            }\n        });\n    }, []);\n\n    // Update local storage when the selected provider changes\n    useEffect(() => {\n        if (selectedProvider) {\n            localStorage.setItem('wpAiImageGenLastProvider', selectedProvider);\n            setLastUsedProvider(selectedProvider);\n        }\n    }, [selectedProvider]);\n\n    // Handler for image generation\n    const handleGenerate = () => {\n        // Check if the prompt is empty or only whitespace\n        if (!prompt.trim()) {\n            setError('Please enter a prompt for image generation.');\n            return;\n        }\n\n        setIsLoading(true);\n        setError(null); // Clear any previous errors\n        generateImage(prompt.trim(), selectedProvider, (media) => {\n            if (media.error) {\n                setError(media.error);\n                setIsLoading(false);\n            } else {\n                onSelect(media);\n                setIsLoading(false);\n                setIsModalOpen(false);\n            }\n        });\n    };\n\n    // Prepare provider options for dropdown\n    const providerOptions = Object.entries(providers).map(([id, name]) => ({ value: id, label: name }));\n\n    return (\n        <>\n            {/* Button to open the AI image generation modal */}\n            <div className=\"block-editor-media-placeholder__url-input-container\">\n                <Button\n                    variant=\"tertiary\"\n                    onClick={() => setIsModalOpen(true)}\n                    className=\"block-editor-media-placeholder__button\"\n                >\n                    Generate AI Image\n                </Button>\n            </div>\n\n            {/* Modal for AI image generation */}\n            {isModalOpen && (\n                <Modal\n                    title=\"WP AI Image Gen\"\n                    onRequestClose={() => setIsModalOpen(false)}\n                >\n                    {error && <p style={{ color: 'red' }}>{error}</p>}\n                    {/* Provider dropdown (only if there's more than one provider) */}\n                    {providerOptions.length > 1 && (\n                        <SelectControl\n                            label=\"Select Provider\"\n                            value={selectedProvider}\n                            options={providerOptions}\n                            onChange={setSelectedProvider}\n                        />\n                    )}\n                    {/* Input field for the image prompt */}\n                    <TextareaControl\n                        label=\"Enter your image prompt\"\n                        value={prompt}\n                        onChange={setPrompt}\n                        rows={4}\n                    />\n                    {/* Button to trigger image generation */}\n                    <Button\n                        variant=\"primary\"\n                        onClick={handleGenerate}\n                        disabled={isLoading || !selectedProvider || !prompt.trim()}\n                    >\n                        {isLoading ? (\n                            <>\n                                <Spinner />\n                                Generating...\n                            </>\n                        ) : (\n                            'Generate Image'\n                        )}\n                    </Button>\n                </Modal>\n            )}\n        </>\n    );\n};\n\n/**\n * AIImageToolbar component for adding buttons to toolbars.\n * This component now handles both paragraph and image block buttons.\n */\nconst AIImageToolbar = ({ isGenerating, onGenerateImage, isRegenerating, onRegenerateImage, isImageBlock, isTextSelected }) => {\n    if (isImageBlock) {\n        // Render regenerate button with refresh icon for image blocks\n        return (\n            <ToolbarGroup>\n                <ToolbarButton\n                    icon={isRegenerating ? <Spinner /> : \"update\"}\n                    label={isRegenerating ? \"Regenerating AI Image...\" : \"Regenerate AI Image\"}\n                    onClick={onRegenerateImage}\n                    disabled={isRegenerating}\n                />\n            </ToolbarGroup>\n        );\n    } else if (isTextSelected) {\n        // Render generate button for paragraph blocks when text is selected\n        return (\n            <ToolbarGroup>\n                <ToolbarButton\n                    icon={isGenerating ? <Spinner /> : \"format-image\"}\n                    label={isGenerating ? \"Generating AI Image...\" : \"Generate AI Image\"}\n                    onClick={onGenerateImage}\n                    disabled={isGenerating}\n                />\n            </ToolbarGroup>\n        );\n    }\n    \n    // Return null if conditions are not met\n    return null;\n};\n\n// Modify the existing registerFormatType function\nregisterFormatType('wp-ai-image-gen/custom-format', {\n    title: 'AI Image Gen',\n    tagName: 'span',\n    className: 'wp-ai-image-gen-format',\n    edit: ({ isActive, value, onChange }) => {\n        const [lastUsedProvider, setLastUsedProvider] = useState('');\n        const [isGenerating, setIsGenerating] = useState(false);\n\n        const selectedBlock = useSelect(select => \n            select('core/block-editor').getSelectedBlock()\n        , []);\n\n        const { replaceBlocks } = useDispatch('core/block-editor');\n\n        // Fetch the last used provider from localStorage when the component mounts\n        useEffect(() => {\n            const storedProvider = localStorage.getItem('wpAiImageGenLastProvider');\n            if (storedProvider) {\n                setLastUsedProvider(storedProvider);\n            }\n        }, []);\n\n        const handleGenerateImage = useCallback(() => {\n            if (selectedBlock && selectedBlock.name === 'core/paragraph') {\n                const selectedText = value.text.slice(value.start, value.end).trim();\n                \n                // Check if selected text exists and is not empty\n                if (!selectedText) {\n                    wp.data.dispatch('core/notices').createErrorNotice(\n                        'Please select some text to use as the image generation prompt.',\n                        { type: 'snackbar' }\n                    );\n                    return;\n                }\n                \n                // Create and insert a placeholder heading block with a message\n                const placeholderBlock = wp.blocks.createBlock('core/heading', {\n                    content: 'Generating AI image...',\n                    level: 2,\n                    style: {\n                        textAlign: 'center',\n                    },\n                });\n                replaceBlocks(selectedBlock.clientId, [placeholderBlock, selectedBlock]);\n                \n                setIsGenerating(true);\n                \n                generateImage(selectedText, lastUsedProvider, (result) => {\n                    setIsGenerating(false);\n                    \n                    if (result.error) {\n                        console.error('Image generation failed:', result.error);\n                        wp.data.dispatch('core/notices').createErrorNotice(\n                            'Failed to generate image: ' + result.error,\n                            { type: 'snackbar' }\n                        );\n                        // Remove the placeholder block if there's an error\n                        replaceBlocks(placeholderBlock.clientId, []);\n                    } else {\n                        const imageBlock = wp.blocks.createBlock('core/image', {\n                            url: result.url,\n                            alt: result.alt,\n                            caption: '',\n                            id: result.id || `ai-generated-${Date.now()}`, // Ensure ID is set\n                        });\n                        // Replace the placeholder block with the new image block\n                        replaceBlocks(placeholderBlock.clientId, [imageBlock]);\n                    }\n                });\n            }\n        }, [selectedBlock, value.text, value.start, value.end, replaceBlocks, lastUsedProvider]);\n\n        // Check if there's any text selected\n        const isTextSelected = value.start !== value.end;\n\n        return (\n            <BlockControls>\n                <AIImageToolbar\n                    isGenerating={isGenerating}\n                    onGenerateImage={handleGenerateImage}\n                    isTextSelected={isTextSelected}\n                />\n            </BlockControls>\n        );\n    },\n});\n\n// Add the AI tab to the media modal using WordPress filter\naddFilter('editor.MediaUpload', 'wp-ai-image-gen/add-ai-tab', (OriginalMediaUpload) => {\n    // Return a new component that wraps the original MediaUpload\n    return (props) => {\n        return (\n            <OriginalMediaUpload\n                {...props}\n                render={(originalProps) => (\n                    <>\n                        {/* Render the original MediaUpload component */}\n                        {props.render(originalProps)}\n                        {/* Add the AITab component */}\n                        <AITab onSelect={props.onSelect} />\n                    </>\n                )}\n            />\n        );\n    };\n});\n\n// Modify the existing addFilter function at the end of the file\naddFilter('editor.BlockEdit', 'wp-ai-image-gen/add-regenerate-button', (BlockEdit) => {\n    return (props) => {\n        const [isRegenerating, setIsRegenerating] = useState(false);\n        const [lastUsedProvider, setLastUsedProvider] = useState('');\n        const [error, setError] = useState(null);\n\n        useEffect(() => {\n            const storedProvider = localStorage.getItem('wpAiImageGenLastProvider');\n            if (storedProvider) {\n                setLastUsedProvider(storedProvider);\n            }\n        }, []);\n\n        const handleRegenerateImage = () => {\n            // Check if alt text exists and is not empty\n            if (!props.attributes.alt || props.attributes.alt.trim() === '') {\n                wp.data.dispatch('core/notices').createErrorNotice(\n                    'Please provide alt text to use as the image generation prompt.',\n                    { type: 'snackbar' }\n                );\n                return;\n            }\n\n            setIsRegenerating(true);\n            generateImage(props.attributes.alt.trim(), lastUsedProvider, (result) => {\n                setIsRegenerating(false);\n                if (result.error) {\n                    console.error('Image regeneration failed:', result.error);\n                    wp.data.dispatch('core/notices').createErrorNotice(\n                        'Failed to regenerate image: ' + result.error,\n                        { type: 'snackbar' }\n                    );\n                } else {\n                    props.setAttributes({\n                        url: result.url,\n                        id: result.id || `ai-generated-${Date.now()}`,\n                    });\n                }\n            });\n        };\n\n        if (props.name !== 'core/image') {\n            return <BlockEdit {...props} />;\n        }\n\n        return (\n            <>\n                <BlockEdit {...props} />\n                <BlockControls>\n                    <AIImageToolbar\n                        isRegenerating={isRegenerating}\n                        onRegenerateImage={handleRegenerateImage}\n                        isImageBlock={true}\n                    />\n                </BlockControls>\n            </>\n        );\n    };\n});\n","module.exports = window[\"React\"];","module.exports = window[\"wp\"][\"blockEditor\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"data\"];","module.exports = window[\"wp\"][\"element\"];","module.exports = window[\"wp\"][\"hooks\"];","module.exports = window[\"wp\"][\"richText\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};"],"names":["addFilter","useState","useEffect","Button","TextareaControl","Modal","Spinner","SelectControl","ToolbarButton","Icon","registerFormatType","toggleFormat","BlockControls","useSelect","useDispatch","useCallback","InspectorControls","PanelBody","ToolbarGroup","fetchProviders","response","wp","apiFetch","path","error","console","generateImage","prompt","provider","callback","method","data","url","alt","id","Date","now","caption","includes","Error","JSON","stringify","message","stack","AITab","onSelect","isModalOpen","setIsModalOpen","setPrompt","isLoading","setIsLoading","providers","setProviders","selectedProvider","setSelectedProvider","setError","lastUsedProvider","setLastUsedProvider","then","result","storedProvider","localStorage","getItem","Object","keys","setItem","handleGenerate","trim","media","providerOptions","entries","map","name","value","label","createElement","Fragment","className","variant","onClick","title","onRequestClose","style","color","length","options","onChange","rows","disabled","AIImageToolbar","isGenerating","onGenerateImage","isRegenerating","onRegenerateImage","isImageBlock","isTextSelected","icon","tagName","edit","isActive","setIsGenerating","selectedBlock","select","getSelectedBlock","replaceBlocks","handleGenerateImage","selectedText","text","slice","start","end","dispatch","createErrorNotice","type","placeholderBlock","blocks","createBlock","content","level","textAlign","clientId","imageBlock","OriginalMediaUpload","props","render","originalProps","BlockEdit","setIsRegenerating","handleRegenerateImage","attributes","setAttributes"],"sourceRoot":""}