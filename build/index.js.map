{"version":3,"file":"index.js","mappings":"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","sources":["webpack://wp-ai-image-gen/./src/core-image-modifications.js","webpack://wp-ai-image-gen/external window \"React\"","webpack://wp-ai-image-gen/external window [\"wp\",\"blockEditor\"]","webpack://wp-ai-image-gen/external window [\"wp\",\"components\"]","webpack://wp-ai-image-gen/external window [\"wp\",\"data\"]","webpack://wp-ai-image-gen/external window [\"wp\",\"element\"]","webpack://wp-ai-image-gen/external window [\"wp\",\"hooks\"]","webpack://wp-ai-image-gen/external window [\"wp\",\"richText\"]","webpack://wp-ai-image-gen/webpack/bootstrap","webpack://wp-ai-image-gen/webpack/runtime/compat get default export","webpack://wp-ai-image-gen/webpack/runtime/define property getters","webpack://wp-ai-image-gen/webpack/runtime/hasOwnProperty shorthand","webpack://wp-ai-image-gen/webpack/runtime/make namespace object"],"sourcesContent":["// Import necessary WordPress components and hooks\nimport { addFilter } from '@wordpress/hooks';\nimport { useState, useEffect, useCallback } from '@wordpress/element';\nimport { Button, TextareaControl, Modal, Spinner, SelectControl, ToolbarButton, ToolbarGroup } from '@wordpress/components';\nimport { registerFormatType } from '@wordpress/rich-text';\nimport { BlockControls } from '@wordpress/block-editor';\nimport { useSelect, useDispatch } from '@wordpress/data';\n\n/**\n * Fetches available providers from the server.\n * @returns {Promise<Object>} A promise that resolves to an object of provider IDs and names.\n */\nconst fetchProviders = async () => {\n    try {\n        const response = await wp.apiFetch({ path: '/wp-ai-image-gen/v1/providers' });\n        return response;\n    } catch (error) {\n        console.error('Error fetching providers:', error);\n        // Return an object with an error message that can be displayed to the user\n        return { error: 'Unable to fetch providers. Please try again later.' };\n    }\n};\n\n/**\n * Generates an AI image based on the given prompt and provider.\n * @param {string} prompt - The text prompt for image generation.\n * @param {string} provider - The selected provider ID.\n * @param {function} callback - Function to handle the generated image data.\n */\nconst generateImage = async (prompt, provider, callback) => {\n    try {        \n        // Call the WordPress API to generate the image\n        const response = await wp.apiFetch({\n            path: '/wp-ai-image-gen/v1/generate-image',\n            method: 'POST',\n            data: { prompt, provider },\n        });\n\n        // If the response contains a valid URL, call the callback with image data\n        if (response && response.url) {\n            callback({\n                url: response.url,\n                alt: prompt,\n                id: response.id || `ai-generated-${Date.now()}`, // Fallback ID if not provided\n                caption: '',\n            });\n        } else {\n            // Check for NSFW content error\n            if (response && response.error && response.error.includes('NSFW content')) {\n                throw new Error('The image could not be generated due to potential inappropriate content. Please try a different prompt.');\n            } else {\n                throw new Error('Invalid response from server: ' + JSON.stringify(response));\n            }\n        }\n    } catch (error) {\n        // Log the detailed error and call the callback with an error object\n        console.error('Detailed error in generateImage:', error);\n        if (error.message) console.error('Error message:', error.message);\n        if (error.stack) console.error('Error stack:', error.stack);\n        callback({ error: error.message || 'Unknown error occurred' });\n    }\n};\n\n/**\n * AITab component for generating AI images.\n *\n * @param {Object} props - Component properties.\n * @param {function} props.onSelect - Function to handle selected image.\n * @param {boolean} props.shouldDisplay - Determines if the AITab should be displayed.\n * @returns {JSX.Element|null} The AITab component or null.\n */\nconst AITab = ({ onSelect, shouldDisplay }) => {\n    // State hooks for modal, prompt, loading status, providers, and selected provider.\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [prompt, setPrompt] = useState('');\n    const [isLoading, setIsLoading] = useState(false);\n    const [providers, setProviders] = useState({});\n    const [selectedProvider, setSelectedProvider] = useState('');\n    const [error, setError] = useState(null);\n    const [lastUsedProvider, setLastUsedProvider] = useState('');\n\n    // Fetch providers and last used provider when component mounts.\n    useEffect(() => {\n        fetchProviders().then((result) => {\n            if (result.error) {\n                setError(result.error);\n            } else {\n                setProviders(result);\n            \n                // Retrieve the last used provider from local storage.\n                const storedProvider = localStorage.getItem('wpAiImageGenLastProvider');\n                if (storedProvider && result[storedProvider]) {\n                    setSelectedProvider(storedProvider);\n                    setLastUsedProvider(storedProvider);\n                } else {\n                    // If no stored provider or it's invalid, use the first available provider.\n                    setSelectedProvider(Object.keys(result)[0]);\n                }\n            }\n        });\n    }, []);\n\n    // Update local storage when the selected provider changes.\n    useEffect(() => {\n        if (selectedProvider) {\n            localStorage.setItem('wpAiImageGenLastProvider', selectedProvider);\n            setLastUsedProvider(selectedProvider);\n        }\n    }, [selectedProvider]);\n\n    /**\n     * Handler for image generation.\n     */\n    const handleGenerate = () => {\n        // Check if the prompt is empty or only whitespace.\n        if (!prompt.trim()) {\n            setError('Please enter a prompt for image generation.');\n            return;\n        }\n\n        setIsLoading(true);\n        setError(null); // Clear any previous errors.\n        generateImage(prompt.trim(), selectedProvider, (media) => {\n            if (media.error) {\n                setError(media.error);\n                setIsLoading(false);\n            } else {\n                onSelect(media);\n                setIsLoading(false);\n                setIsModalOpen(false);\n            }\n        });\n    };\n\n    // Prepare provider options for dropdown.\n    const providerOptions = Object.entries(providers).map(([id, name]) => ({ value: id, label: name }));\n\n    // If shouldDisplay is false, do not render the button and modal.\n    if (!shouldDisplay) {\n        return null;\n    }\n\n    return (\n        <>\n            {/* Button to open the AI image generation modal */}\n            <div className=\"block-editor-media-placeholder__url-input-container\">\n                <Button\n                    variant=\"secondary\" // Secondary styling for the button.\n                    onClick={() => setIsModalOpen(true)} // Open the modal on click.\n                    className=\"block-editor-media-placeholder__button is-secondary\" // Additional styling class.\n                >\n                    Generate AI Image\n                </Button>\n            </div>\n\n            {/* Modal for AI image generation */}\n            {isModalOpen && (\n                <Modal\n                    title=\"WP AI Image Gen\" // Modal title.\n                    onRequestClose={() => setIsModalOpen(false)} // Close modal on request.\n                >\n                    {/* Display error message if any */}\n                    {error && <p style={{ color: 'red' }}>{error}</p>}\n                    \n                    {/* Provider dropdown; visible only if multiple providers exist */}\n                    {providerOptions.length > 1 && (\n                        <SelectControl\n                            label=\"Select Provider\"\n                            value={selectedProvider}\n                            options={providerOptions}\n                            onChange={setSelectedProvider}\n                        />\n                    )}\n                    \n                    {/* Input field for the image prompt */}\n                    <TextareaControl\n                        label=\"Enter your image prompt\"\n                        value={prompt}\n                        onChange={setPrompt}\n                        rows={4}\n                    />\n                    \n                    {/* Button to trigger image generation */}\n                    <Button\n                        variant=\"primary\" // Primary styling for the button.\n                        onClick={handleGenerate} // Trigger image generation on click.\n                        disabled={isLoading || !selectedProvider || !prompt.trim()} // Disable if loading or inputs missing.\n                    >\n                        {isLoading ? (\n                            <>\n                                <Spinner />\n                                Generating...\n                            </>\n                        ) : (\n                            'Generate Image'\n                        )}\n                    </Button>\n                </Modal>\n            )}\n        </>\n    );\n};\n\n/**\n * AIImageToolbar component for adding buttons to toolbars.\n * This component handles both image regeneration and image generation based on text selection.\n *\n * @param {Object} props - Component properties.\n * @param {boolean} props.isGenerating - Indicates if an image is currently being generated.\n * @param {Function} props.onGenerateImage - Function to handle image generation.\n * @param {boolean} props.isRegenerating - Indicates if an image is currently being regenerated.\n * @param {Function} props.onRegenerateImage - Function to handle image regeneration.\n * @param {boolean} props.isImageBlock - Indicates if the current block is an image block.\n * @param {boolean} props.isTextSelected - Indicates if text is selected within the block.\n * @returns {JSX.Element|null} The rendered toolbar buttons or null.\n */\nconst AIImageToolbar = ({\n    isGenerating,\n    onGenerateImage,\n    isRegenerating,\n    onRegenerateImage,\n    isImageBlock,\n    isTextSelected,\n}) => {\n    // If the block is an image block, render the regenerate button with appropriate states.\n    if (isImageBlock) {\n        return (\n            <ToolbarGroup>\n                <ToolbarButton\n                    icon={isRegenerating ? <Spinner /> : \"update\"}\n                    label={isRegenerating ? \"Regenerating AI Image...\" : \"Regenerate AI Image\"}\n                    onClick={onRegenerateImage}\n                    disabled={isRegenerating}\n                />\n            </ToolbarGroup>\n        );\n    } \n    // If text is selected, render the generate button.\n    else if (isTextSelected) {\n        return (\n            <ToolbarGroup>\n                <ToolbarButton\n                    icon={isGenerating ? <Spinner /> : \"format-image\"}\n                    label={isGenerating ? \"Generating AI Image...\" : \"Generate AI Image\"}\n                    onClick={onGenerateImage}\n                    disabled={isGenerating}\n                />\n            </ToolbarGroup>\n        );\n    }\n\n    // Return null if conditions are not met.\n    return null;\n};\n\n/**\n * Modifies the existing registerFormatType function to include the regenerate button.\n *\n * @param {function} BlockEdit - The original BlockEdit component.\n * @returns {function} The modified BlockEdit component with AI image functionality.\n */\nregisterFormatType('wp-ai-image-gen/custom-format', {\n    title: 'AI Image Gen',\n    tagName: 'span',\n    className: 'wp-ai-image-gen-format',\n    edit: ({ isActive, value, onChange }) => {\n        // State hooks for handling image generation states and selected provider.\n        const [lastUsedProvider, setLastUsedProvider] = useState('');\n        const [isGenerating, setIsGenerating] = useState(false);\n        const selectedBlock = useSelect(select => \n            select('core/block-editor').getSelectedBlock()\n        , []);\n        const { replaceBlocks } = useDispatch('core/block-editor');\n\n        // Fetch the last used provider from localStorage when the component mounts.\n        useEffect(() => {\n            const storedProvider = localStorage.getItem('wpAiImageGenLastProvider');\n            if (storedProvider) {\n                setLastUsedProvider(storedProvider);\n            }\n        }, []);\n\n        /**\n         * Handles the image generation process based on the selected text.\n         */\n        const handleGenerateImage = useCallback(() => {\n            if (selectedBlock && selectedBlock.name === 'core/paragraph') {\n                const selectedText = value.text.slice(value.start, value.end).trim();\n                \n                // Check if selected text exists and is not empty.\n                if (!selectedText) {\n                    wp.data.dispatch('core/notices').createErrorNotice(\n                        'Please select some text to use as the image generation prompt.',\n                        { type: 'snackbar' }\n                    );\n                    return;\n                }\n                \n                // Create and insert a placeholder heading block with a message.\n                const placeholderBlock = wp.blocks.createBlock('core/heading', {\n                    content: 'Generating AI image...',\n                    level: 2,\n                    style: {\n                        textAlign: 'center',\n                    },\n                });\n                replaceBlocks(selectedBlock.clientId, [placeholderBlock, selectedBlock]);\n                \n                setIsGenerating(true);\n                \n                generateImage(selectedText, lastUsedProvider, (result) => {\n                    setIsGenerating(false);\n                    \n                    if (result.error) {\n                        console.error('Image generation failed:', result.error);\n                        wp.data.dispatch('core/notices').createErrorNotice(\n                            'Failed to generate image: ' + result.error,\n                            { type: 'snackbar' }\n                        );\n                        // Remove the placeholder block if there's an error.\n                        replaceBlocks(placeholderBlock.clientId, []);\n                    } else {\n                        const imageBlock = wp.blocks.createBlock('core/image', {\n                            url: result.url,\n                            alt: result.alt,\n                            caption: '',\n                            id: result.id || `ai-generated-${Date.now()}`, // Ensure ID is set.\n                        });\n                        // Replace the placeholder block with the new image block.\n                        replaceBlocks(placeholderBlock.clientId, [imageBlock]);\n                    }\n                });\n            }\n        }, [selectedBlock, value.text, value.start, value.end, replaceBlocks, lastUsedProvider]);\n\n        // Extract the selected text and determine if any text is selected.\n        const selectedText = value.text.slice(value.start, value.end).trim();\n        const isTextSelected = selectedText !== \"\";\n\n        return (\n            <BlockControls>\n                <AIImageToolbar\n                    isGenerating={isGenerating}\n                    onGenerateImage={handleGenerateImage}\n                    isTextSelected={isTextSelected}\n                />\n            </BlockControls>\n        );\n    },\n});\n\n// Add the AI tab to the media modal using WordPress filter\naddFilter('editor.MediaUpload', 'wp-ai-image-gen/add-ai-tab', (OriginalMediaUpload) => {\n    /**\n     * Enhances the original MediaUpload component by adding the AITab.\n     *\n     * @param {Object} props - Props passed to the MediaUpload component.\n     * @returns {JSX.Element} The enhanced MediaUpload component.\n     */\n    return (props) => {\n        // Determine if the MediaUpload is for a single image block by checking if multiple is false or undefined.\n        const isSingleImageBlock = props.allowedTypes && props.allowedTypes.includes('image') && !props.multiple;\n\n        // Retrieve the currently selected block using wp.data.\n        const selectedBlock = wp.data.select('core/block-editor').getSelectedBlock();\n\n        // Check if the selected block is an image block.\n        const isImageBlock = selectedBlock && selectedBlock.name === 'core/image';\n\n        // Determine if AITab should be displayed.\n        const shouldDisplay = isSingleImageBlock && isImageBlock;\n\n        return (\n            <OriginalMediaUpload\n                {...props}\n                render={(originalProps) => (\n                    <>\n                        {/* Render the original MediaUpload component */}\n                        {props.render(originalProps)}\n                        {/* Add the AITab component only if it's a single image block */}\n                        <AITab \n                            onSelect={props.onSelect} \n                            shouldDisplay={shouldDisplay} \n                        />\n                    </>\n                )}\n            />\n        );\n    };\n});\n\n/**\n * Adds the regenerate button to image blocks in the editor.\n *\n * @param {function} BlockEdit - The original BlockEdit component.\n * @returns {function} The modified BlockEdit component with AI image regeneration functionality.\n */\naddFilter('editor.BlockEdit', 'wp-ai-image-gen/add-regenerate-button', (BlockEdit) => {\n    return (props) => {\n        const [isRegenerating, setIsRegenerating] = useState(false);\n        const [lastUsedProvider, setLastUsedProvider] = useState('');\n        const [error, setError] = useState(null);\n\n        // Fetch the last used provider from localStorage when the component mounts.\n        useEffect(() => {\n            const storedProvider = localStorage.getItem('wpAiImageGenLastProvider');\n            if (storedProvider) {\n                setLastUsedProvider(storedProvider);\n            }\n        }, []);\n\n        /**\n         * Handles the image regeneration process.\n         */\n        const handleRegenerateImage = () => {\n            // Check if alt text exists and is not empty.\n            if (!props.attributes.alt || props.attributes.alt.trim() === '') {\n                wp.data.dispatch('core/notices').createErrorNotice(\n                    'Please provide alt text to use as the image generation prompt.',\n                    { type: 'snackbar' }\n                );\n                return;\n            }\n\n            setIsRegenerating(true);\n            generateImage(props.attributes.alt.trim(), lastUsedProvider, (result) => {\n                setIsRegenerating(false);\n                if (result.error) {\n                    console.error('Image regeneration failed:', result.error);\n                    wp.data.dispatch('core/notices').createErrorNotice(\n                        'Failed to regenerate image: ' + result.error,\n                        { type: 'snackbar' }\n                    );\n                } else {\n                    props.setAttributes({\n                        url: result.url,\n                        id: result.id || `ai-generated-${Date.now()}`,\n                    });\n                }\n            });\n        };\n\n        // Only modify the core/image block.\n        if (props.name !== 'core/image') {\n            return <BlockEdit {...props} />;\n        }\n\n        return (\n            <>\n                <BlockEdit {...props} />\n                <BlockControls>\n                    <AIImageToolbar\n                        isRegenerating={isRegenerating}\n                        onRegenerateImage={handleRegenerateImage}\n                        isImageBlock={true}\n                    />\n                </BlockControls>\n            </>\n        );\n    };\n});","module.exports = window[\"React\"];","module.exports = window[\"wp\"][\"blockEditor\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"data\"];","module.exports = window[\"wp\"][\"element\"];","module.exports = window[\"wp\"][\"hooks\"];","module.exports = window[\"wp\"][\"richText\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};"],"names":["addFilter","useState","useEffect","useCallback","Button","TextareaControl","Modal","Spinner","SelectControl","ToolbarButton","ToolbarGroup","registerFormatType","BlockControls","useSelect","useDispatch","fetchProviders","response","wp","apiFetch","path","error","console","generateImage","prompt","provider","callback","method","data","url","alt","id","Date","now","caption","includes","Error","JSON","stringify","message","stack","AITab","onSelect","shouldDisplay","isModalOpen","setIsModalOpen","setPrompt","isLoading","setIsLoading","providers","setProviders","selectedProvider","setSelectedProvider","setError","lastUsedProvider","setLastUsedProvider","then","result","storedProvider","localStorage","getItem","Object","keys","setItem","handleGenerate","trim","media","providerOptions","entries","map","name","value","label","createElement","Fragment","className","variant","onClick","title","onRequestClose","style","color","length","options","onChange","rows","disabled","AIImageToolbar","isGenerating","onGenerateImage","isRegenerating","onRegenerateImage","isImageBlock","isTextSelected","icon","tagName","edit","isActive","setIsGenerating","selectedBlock","select","getSelectedBlock","replaceBlocks","handleGenerateImage","selectedText","text","slice","start","end","dispatch","createErrorNotice","type","placeholderBlock","blocks","createBlock","content","level","textAlign","clientId","imageBlock","OriginalMediaUpload","props","isSingleImageBlock","allowedTypes","multiple","render","originalProps","BlockEdit","setIsRegenerating","handleRegenerateImage","attributes","setAttributes"],"sourceRoot":""}