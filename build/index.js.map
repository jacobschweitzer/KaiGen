{"version":3,"file":"index.js","mappings":"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","sources":["webpack://wp-ai-image-gen/./src/api.js","webpack://wp-ai-image-gen/./src/components/AIImageToolbar.js","webpack://wp-ai-image-gen/./src/components/AITab.js","webpack://wp-ai-image-gen/./src/core-image-modifications.js","webpack://wp-ai-image-gen/./src/filters/addBlockEditFilter.js","webpack://wp-ai-image-gen/./src/filters/addMediaUploadFilter.js","webpack://wp-ai-image-gen/./src/filters/registerFormatType.js","webpack://wp-ai-image-gen/external window \"React\"","webpack://wp-ai-image-gen/external window [\"wp\",\"blockEditor\"]","webpack://wp-ai-image-gen/external window [\"wp\",\"components\"]","webpack://wp-ai-image-gen/external window [\"wp\",\"data\"]","webpack://wp-ai-image-gen/external window [\"wp\",\"element\"]","webpack://wp-ai-image-gen/external window [\"wp\",\"hooks\"]","webpack://wp-ai-image-gen/external window [\"wp\",\"richText\"]","webpack://wp-ai-image-gen/webpack/bootstrap","webpack://wp-ai-image-gen/webpack/runtime/compat get default export","webpack://wp-ai-image-gen/webpack/runtime/define property getters","webpack://wp-ai-image-gen/webpack/runtime/hasOwnProperty shorthand","webpack://wp-ai-image-gen/webpack/runtime/make namespace object"],"sourcesContent":["// This file provides API functions for fetching available providers and generating AI images.\n\n/**\n * Fetches available providers from the server.\n *\n * @returns {Promise<Object>} A promise that resolves to an object containing provider IDs and names.\n */\nexport const fetchProviders = async () => { // This function fetches providers using WordPress API.\n    try {\n        // Attempt to fetch providers using wp.apiFetch.\n        const response = await wp.apiFetch({ path: '/wp-ai-image-gen/v1/providers' });\n        return response; // Return the successful response.\n    } catch (error) {\n        // Log any errors that occur during fetch.\n        console.error('Error fetching providers:', error);\n        // Return an object with an error field to indicate failure.\n        return { error: 'Unable to fetch providers. Please try again later.' };\n    }\n};\n\n/**\n * Generates an AI image based on the given prompt and provider.\n *\n * @param {string} prompt - The text prompt for image generation.\n * @param {string} provider - The selected provider ID.\n * @param {function} callback - The callback function to handle the generated image data.\n * @returns {Promise<void>} A promise that resolves when the image generation is complete.\n */\nexport const generateImage = async ( prompt, provider, callback ) => { // This function handles image generation using the WordPress API.\n    try {\n        // Call the WordPress API to generate the image.\n        const response = await wp.apiFetch({\n            path: '/wp-ai-image-gen/v1/generate-image',\n            method: 'POST',\n            data: { prompt, provider },\n        });\n\n        // If the response contains a valid URL, return the image data.\n        if (response && response.url) {\n            callback({\n                url: response.url,\n                alt: prompt,\n                id: response.id || `ai-generated-${Date.now()}`, // Use a fallback ID if none is provided.\n                caption: '',\n            });\n        } else {\n            // If the response indicates NSFW content, throw an error.\n            if (response && response.error && response.error.includes('NSFW content')) {\n                throw new Error('The image could not be generated due to potential inappropriate content. Please try a different prompt.');\n            } else {\n                // Throw an error for any other invalid response.\n                throw new Error('Invalid response from server: ' + JSON.stringify(response));\n            }\n        }\n    } catch (error) {\n        // Log detailed error information.\n        console.error('Detailed error in generateImage:', error);\n        if (error.message) console.error('Error message:', error.message);\n        if (error.stack) console.error('Error stack:', error.stack);\n        // Call the callback with the error information.\n        callback({ error: error.message || 'Unknown error occurred' });\n    }\n}; ","// This file contains the AIImageToolbar component used in block toolbars for AI image actions.\n\nimport { Spinner, ToolbarButton, ToolbarGroup } from '@wordpress/components'; // Import necessary toolbar components.\n\n/**\n * AIImageToolbar component for adding AI image generation or regeneration buttons.\n *\n * @param {Object} props - Component properties.\n * @param {boolean} props.isGenerating - Indicates if an image is currently being generated.\n * @param {Function} props.onGenerateImage - Callback to handle image generation.\n * @param {boolean} [props.isRegenerating] - Indicates if an image is being regenerated.\n * @param {Function} [props.onRegenerateImage] - Callback to handle image regeneration.\n * @param {boolean} [props.isImageBlock] - Determines if the current block is an image block.\n * @param {boolean} [props.isTextSelected] - Determines if text is selected to trigger generation.\n * @returns {JSX.Element|null} Returns the toolbar with the appropriate button or null if conditions are unmet.\n */\nconst AIImageToolbar = ({\n    isGenerating,\n    onGenerateImage,\n    isRegenerating,\n    onRegenerateImage,\n    isImageBlock,\n    isTextSelected,\n}) => { // This functional component returns toolbar buttons based on the context of the block.\n    // Render a regenerate button if the current block is an image block.\n    if (isImageBlock) {\n        return (\n            <ToolbarGroup>\n                <ToolbarButton\n                    icon={isRegenerating ? <Spinner /> : \"update\"} // Show spinner when regenerating.\n                    label={isRegenerating ? \"Regenerating AI Image...\" : \"Regenerate AI Image\"} // Button label based on state.\n                    onClick={onRegenerateImage} // Invokes the regeneration handler.\n                    disabled={isRegenerating} // Disables the button when a regeneration is in progress.\n                />\n            </ToolbarGroup>\n        );\n    }\n    // Render a generate button if text is selected.\n    else if (isTextSelected) {\n        return (\n            <ToolbarGroup>\n                <ToolbarButton\n                    icon={isGenerating ? <Spinner /> : \"format-image\"} // Show spinner when generating.\n                    label={isGenerating ? \"Generating AI Image...\" : \"Generate AI Image\"} // Button label based on generation status.\n                    onClick={onGenerateImage} // Invokes the generation handler.\n                    disabled={isGenerating} // Disables the button during generation.\n                />\n            </ToolbarGroup>\n        );\n    }\n\n    // Return null if neither condition is met.\n    return null;\n};\n\nexport default AIImageToolbar; // Export the AIImageToolbar component. ","// This file contains the AITab React component used to generate AI images through a modal.\n\nimport { useState, useEffect } from '@wordpress/element'; // Import WordPress hooks.\nimport { Button, TextareaControl, Modal, Spinner, SelectControl } from '@wordpress/components'; // Import necessary UI components.\nimport { generateImage, fetchProviders } from '../api'; // Import API functions.\n\n/**\n * AITab component for generating AI images.\n *\n * @param {Object} props - The properties object.\n * @param {function} props.onSelect - The callback function to handle the selected image.\n * @param {boolean} props.shouldDisplay - Flag indicating whether to render the AITab.\n * @returns {JSX.Element|null} The rendered AITab component or null if not displayed.\n */\nconst AITab = ({ onSelect, shouldDisplay }) => { // This is the AITab functional component.\n    // State for modal visibility, prompt text, loading indicator, available providers, selected provider, and error message.\n    const [isModalOpen, setIsModalOpen] = useState(false); // Indicates if the modal is open.\n    const [prompt, setPrompt] = useState(''); // Stores the image prompt.\n    const [isLoading, setIsLoading] = useState(false); // Indicates if image generation is in progress.\n    const [providers, setProviders] = useState([]); // Holds available provider IDs.\n    const [selectedProvider, setSelectedProvider] = useState(''); // Tracks the selected provider.\n    const [error, setError] = useState(null); // Holds any error messages.\n\n    // Fetch providers from the server when the component mounts.\n    useEffect(() => {\n        const initializeProviders = async () => { // This async function fetches providers.\n            try {\n                const result = await fetchProviders(); // Call the API to get providers.\n                if (result.error) {\n                    setError(result.error); // Set error state if fetching failed.\n                    return;\n                }\n                setProviders(result); // Set the list of providers.\n\n                // Retrieve the last used provider from localStorage.\n                const storedProvider = localStorage.getItem('wpAiImageGenLastProvider');\n                // Use the stored provider if valid, otherwise choose the first available provider.\n                if (storedProvider && result.includes(storedProvider)) {\n                    setSelectedProvider(storedProvider);\n                } else if (result.length > 0) {\n                    setSelectedProvider(result[0]);\n                    localStorage.setItem('wpAiImageGenLastProvider', result[0]); // Save the default provider.\n                }\n            } catch (err) {\n                setError('Failed to fetch providers: ' + err.message); // Set error if provider fetching fails.\n            }\n        };\n\n        initializeProviders(); // Invoke our initializeProviders function.\n    }, []);\n\n    // Update localStorage whenever the selected provider changes.\n    useEffect(() => {\n        if (selectedProvider) {\n            localStorage.setItem('wpAiImageGenLastProvider', selectedProvider); // Save the selected provider.\n        }\n    }, [selectedProvider]);\n\n    /**\n     * Handles the image generation process when the Generate button is clicked.\n     *\n     * @returns {void}\n     */\n    const handleGenerate = () => { // This function handles the generation of an AI image.\n        // Check if the prompt is empty or consists solely of whitespace.\n        if (!prompt.trim()) {\n            setError('Please enter a prompt for image generation.');\n            return;\n        }\n        // Ensure a provider is selected.\n        if (!selectedProvider) {\n            setError('Please select a provider for image generation.');\n            return;\n        }\n        setIsLoading(true); // Start loading state.\n        setError(null); // Clear any previous errors.\n\n        // Call generateImage API function with the prompt and selected provider.\n        generateImage(prompt.trim(), selectedProvider, (media) => {\n            if (media.error) {\n                setError(media.error); // Set error if generation fails.\n                setIsLoading(false); // End loading state.\n            } else {\n                onSelect(media); // Pass image media back to the parent.\n                setIsLoading(false); // End loading state.\n                setIsModalOpen(false); // Close the modal.\n            }\n        });\n    };\n\n    // Map provider IDs to objects for the SelectControl dropdown.\n    const providerOptions = providers.map((id) => ({ \n        value: id, \n        label: id.charAt(0).toUpperCase() + id.slice(1), // Capitalize the first letter.\n    }));\n\n    // Do not render the component if shouldDisplay is false.\n    if (!shouldDisplay) {\n        return null;\n    }\n\n    return (\n        <>\n            {/* Button to open the AI image generation modal. */}\n            <div className=\"block-editor-media-placeholder__url-input-container\">\n                <Button\n                    variant=\"secondary\" // Uses secondary styling.\n                    onClick={() => setIsModalOpen(true)} // Opens the modal when clicked.\n                    className=\"block-editor-media-placeholder__button is-secondary\" // Additional CSS classes.\n                >\n                    Generate AI Image\n                </Button>\n            </div>\n\n            {/* Modal for entering the prompt and generating the image. */}\n            {isModalOpen && (\n                <Modal\n                    title=\"WP AI Image Gen\" // Modal title.\n                    onRequestClose={() => setIsModalOpen(false)} // Closes the modal.\n                >\n                    {/* Display error message if present. */}\n                    {error && <p style={{ color: 'red' }}>{error}</p>}\n                    \n                    {/* Render the provider dropdown only if there is more than one provider. */}\n                    {providerOptions.length > 1 && (\n                        <SelectControl\n                            label=\"Select Provider\"\n                            value={selectedProvider}\n                            options={providerOptions}\n                            onChange={setSelectedProvider} // Updates selected provider.\n                        />\n                    )}\n                    \n                    {/* Textarea to enter the image prompt. */}\n                    <TextareaControl\n                        label=\"Enter your image prompt\"\n                        value={prompt}\n                        onChange={setPrompt} // Updates the prompt state.\n                        rows={4}\n                    />\n                    \n                    {/* Button to trigger image generation. */}\n                    <Button\n                        variant=\"primary\" // Uses primary styling.\n                        onClick={handleGenerate} // Initiates image generation.\n                        disabled={isLoading || !selectedProvider || !prompt.trim()} // Disables button if conditions are not met.\n                    >\n                        {isLoading ? (\n                            <>\n                                <Spinner /> {/* Display spinner during loading. */}\n                                Generating...\n                            </>\n                        ) : (\n                            'Generate Image'\n                        )}\n                    </Button>\n                </Modal>\n            )}\n        </>\n    );\n};\n\nexport default AITab; // Export the AITab component. ","// This is the main entry point for the AI image generation modifications.\n// It imports the API functions, components, and filters so that they are registered and active.\n\nimport './api'; // Import API functions.\nimport './components/AITab'; // Import the AITab component.\nimport './components/AIImageToolbar'; // Import the toolbar component.\nimport './filters/registerFormatType'; // Register the rich-text format type.\nimport './filters/addMediaUploadFilter'; // Enhance the MediaUpload component.\nimport './filters/addBlockEditFilter'; // Enhance the BlockEdit (image regeneration) functionality.","// This file modifies the block editor for core/image blocks to include an AI image regeneration button.\n\nimport { addFilter } from '@wordpress/hooks'; // Import the addFilter function.\nimport { useState, useEffect } from '@wordpress/element'; // Import necessary React hooks.\nimport { BlockControls } from '@wordpress/block-editor'; // Import BlockControls for toolbar.\nimport AIImageToolbar from '../components/AIImageToolbar'; // Import the AIImageToolbar component.\nimport { fetchProviders, generateImage } from '../api'; // Import API functions for provider fetching and image generation.\n\n/**\n * Enhances the core/image block with an AI image regeneration button.\n *\n * @param {function} BlockEdit - The original BlockEdit component.\n * @returns {function} A new BlockEdit component with additional regeneration functionality.\n */\naddFilter('editor.BlockEdit', 'wp-ai-image-gen/add-regenerate-button', (BlockEdit) => {\n    // Return a new functional component that wraps the original BlockEdit.\n    return (props) => {\n        // Only modify core/image blocks.\n        if (props.name !== 'core/image') {\n            return <BlockEdit {...props} />;\n        }\n\n        // State to manage regeneration progress, provider selection, and errors.\n        const [isRegenerating, setIsRegenerating] = useState(false); // Indicates if regeneration is in progress.\n        const [lastUsedProvider, setLastUsedProvider] = useState(''); // Stores the last used provider.\n        const [error, setError] = useState(null); // Holds error messages if any.\n\n        // Initialize the last used provider on component mount.\n        useEffect(() => {\n            const initializeProvider = async () => { // Async function to initialize provider.\n                try {\n                    const storedProvider = localStorage.getItem('wpAiImageGenLastProvider');\n                    if (storedProvider) {\n                        // Verify that the stored provider is still available.\n                        const availableProviders = await fetchProviders();\n                        if (!availableProviders.error && availableProviders.includes(storedProvider)) {\n                            setLastUsedProvider(storedProvider);\n                            return;\n                        }\n                    }\n                    // If no valid provider was stored, fetch and use the first available provider.\n                    const result = await fetchProviders();\n                    if (!result.error && result.length > 0) {\n                        const defaultProvider = result[0];\n                        setLastUsedProvider(defaultProvider);\n                        localStorage.setItem('wpAiImageGenLastProvider', defaultProvider);\n                    }\n                } catch (err) {\n                    // Log an error and display a notice if initialization fails.\n                    console.error('Failed to initialize provider:', err);\n                    wp.data.dispatch('core/notices').createErrorNotice(\n                        'Failed to initialize AI provider. Please try again.',\n                        { type: 'snackbar' }\n                    );\n                }\n            };\n\n            initializeProvider(); // Run provider initialization.\n        }, []);\n\n        /**\n         * Handles the AI image regeneration process for the current image block.\n         *\n         * @returns {Promise<void>} A promise that resolves when regeneration is complete.\n         */\n        const handleRegenerateImage = async () => { // This function regenerates the image.\n            setError(null); // Clear any previous errors.\n\n            // Validate that there is alt text available to use as a prompt.\n            if (!props.attributes.alt || props.attributes.alt.trim() === '') {\n                wp.data.dispatch('core/notices').createErrorNotice(\n                    'Please provide alt text to use as the image generation prompt.',\n                    { type: 'snackbar' }\n                );\n                return;\n            }\n\n            // Ensure there is a valid provider in use.\n            if (!lastUsedProvider) {\n                try {\n                    const providers = await fetchProviders(); // Fetch providers if necessary.\n                    if (providers.error || providers.length === 0) {\n                        wp.data.dispatch('core/notices').createErrorNotice(\n                            'No AI provider available. Please check your settings.',\n                            { type: 'snackbar' }\n                        );\n                        return;\n                    }\n                    setLastUsedProvider(providers[0]); // Use the first provider.\n                } catch (err) {\n                    wp.data.dispatch('core/notices').createErrorNotice(\n                        'Failed to fetch AI providers. Please try again.',\n                        { type: 'snackbar' }\n                    );\n                    return;\n                }\n            }\n\n            setIsRegenerating(true); // Indicate that regeneration is starting.\n\n            try {\n                // Wrap the generateImage call in a promise.\n                const result = await new Promise((resolve, reject) => {\n                    generateImage(props.attributes.alt.trim(), lastUsedProvider, (result) => {\n                        if (result.error) {\n                            reject(new Error(result.error));\n                        } else {\n                            resolve(result);\n                        }\n                    });\n                });\n\n                // Update the block attributes with the new image data.\n                props.setAttributes({\n                    url: result.url,\n                    id: result.id || `ai-generated-${Date.now()}`, // Use a fallback ID if necessary.\n                });\n\n                // Display a success notice on regeneration.\n                wp.data.dispatch('core/notices').createSuccessNotice(\n                    'Image regenerated successfully!',\n                    { type: 'snackbar' }\n                );\n            } catch (err) {\n                console.error('Image regeneration failed:', err); // Log the error.\n                wp.data.dispatch('core/notices').createErrorNotice(\n                    'Failed to regenerate image: ' + (err.message || 'Unknown error'),\n                    { type: 'snackbar' }\n                );\n            } finally {\n                setIsRegenerating(false); // Reset the regeneration state.\n            }\n        };\n\n        return (\n            <>\n                <BlockEdit {...props} /> {/* Render the default BlockEdit component. */}\n                <BlockControls>\n                    <AIImageToolbar\n                        isRegenerating={isRegenerating}\n                        onRegenerateImage={handleRegenerateImage}\n                        isImageBlock={true} // Always true for core/image blocks.\n                    />\n                </BlockControls>\n            </>\n        );\n    };\n});\n","// This file enhances the MediaUpload component by adding the AITab for AI image generation.\n\nimport { addFilter } from '@wordpress/hooks'; // Import the addFilter function.\nimport AITab from '../components/AITab'; // Import the AITab component.\n\n/**\n * Enhances the MediaUpload component by adding the AITab.\n *\n * @param {Object} props - Properties passed to the MediaUpload component.\n * @returns {JSX.Element} The enhanced MediaUpload component with the AITab.\n */\naddFilter('editor.MediaUpload', 'wp-ai-image-gen/add-ai-tab', (OriginalMediaUpload) => {\n    // Return a new component which wraps the original MediaUpload.\n    return (props) => {\n        // Check if the MediaUpload is used for a single image block.\n        const isSingleImageBlock = props.allowedTypes && props.allowedTypes.includes('image') && !props.multiple;\n\n        // Retrieve the currently selected block from the editor.\n        const selectedBlock = wp.data.select('core/block-editor').getSelectedBlock();\n        // Determine if the block is an image block.\n        const isImageBlock = selectedBlock && selectedBlock.name === 'core/image';\n\n        /**\n         * Checks if the current block already has image data.\n         *\n         * @returns {boolean} True if the block has an image, otherwise false.\n         */\n        const hasImageData = () => {\n            return selectedBlock && selectedBlock.attributes && selectedBlock.attributes.url;\n        };\n\n        // Only display AITab if this is a single image block without image data.\n        const shouldDisplay = isSingleImageBlock && isImageBlock && !hasImageData();\n\n        return (\n            <OriginalMediaUpload\n                {...props}\n                render={(originalProps) => (\n                    <>\n                        {/* Render the default MediaUpload component. */}\n                        {props.render(originalProps)}\n                        {/* Add the AITab component if conditions are met. */}\n                        <AITab \n                            onSelect={props.onSelect}\n                            shouldDisplay={shouldDisplay}\n                        />\n                    </>\n                )}\n            />\n        );\n    };\n});\n","// This file registers a new rich-text format which uses BlockControls to trigger AI image generation.\n\nimport { useEffect, useCallback, useState } from '@wordpress/element'; // Import React hooks.\nimport { BlockControls } from '@wordpress/block-editor'; // Import BlockControls from the block editor.\nimport { useSelect, useDispatch } from '@wordpress/data'; // Import necessary data hooks.\nimport { registerFormatType } from '@wordpress/rich-text'; // Import registerFormatType.\nimport AIImageToolbar from '../components/AIImageToolbar'; // Import the AIImageToolbar component.\nimport { generateImage } from '../api'; // Import API function for image generation.\n\n/**\n * Registers the AI Image Generation format type and integrates BlockControls.\n *\n * @returns {void}\n */\nregisterFormatType('wp-ai-image-gen/custom-format', {\n    title: 'AI Image Gen',\n    tagName: 'span',\n    className: 'wp-ai-image-gen-format',\n    edit: ({ isActive, value, onChange }) => { // This edit function adds AI image functionality to the block.\n        // Create state for the last used provider and generation state.\n        const [lastUsedProvider, setLastUsedProvider] = useState(''); // Stores the last used provider.\n        const [isGenerating, setIsGenerating] = useState(false); // Indicates if an image is being generated.\n\n        // Retrieve the currently selected block.\n        const selectedBlock = useSelect((select) => select('core/block-editor').getSelectedBlock(), []);\n        // Get the dispatch function to replace blocks.\n        const { replaceBlocks } = useDispatch('core/block-editor');\n\n        // Fetch the last used provider from localStorage when the component mounts.\n        useEffect(() => {\n            const storedProvider = localStorage.getItem('wpAiImageGenLastProvider');\n            if (storedProvider) {\n                setLastUsedProvider(storedProvider);\n            }\n        }, []);\n\n        /**\n         * Handles the AI image generation process based on the selected text.\n         *\n         * @returns {void}\n         */\n        const handleGenerateImage = useCallback(() => { // This function manages image generation.\n            if (selectedBlock && selectedBlock.name === 'core/paragraph') {\n                // Extract the currently selected text.\n                const selectedText = value.text.slice(value.start, value.end).trim();\n                if (!selectedText) {\n                    // Create an error notice if no text is selected.\n                    wp.data.dispatch('core/notices').createErrorNotice(\n                        'Please select some text to use as the image generation prompt.',\n                        { type: 'snackbar' }\n                    );\n                    return;\n                }\n                \n                // Create a placeholder block to show that image generation is in progress.\n                const placeholderBlock = wp.blocks.createBlock('core/heading', {\n                    content: 'Generating AI image...',\n                    level: 2,\n                    style: {\n                        textAlign: 'center',\n                    },\n                });\n                // Replace the selected block with the placeholder.\n                replaceBlocks(selectedBlock.clientId, [placeholderBlock, selectedBlock]);\n                \n                setIsGenerating(true); // Set generating state.\n\n                // Call the API function to generate the image.\n                generateImage(selectedText, lastUsedProvider, (result) => {\n                    setIsGenerating(false); // Reset generating state.\n                    \n                    if (result.error) {\n                        console.error('Image generation failed:', result.error);\n                        wp.data.dispatch('core/notices').createErrorNotice(\n                            'Failed to generate image: ' + result.error,\n                            { type: 'snackbar' }\n                        );\n                        // Remove the placeholder block on error.\n                        replaceBlocks(placeholderBlock.clientId, []);\n                    } else {\n                        // Create a new image block with the image details.\n                        const imageBlock = wp.blocks.createBlock('core/image', {\n                            url: result.url,\n                            alt: result.alt,\n                            caption: '',\n                            id: result.id || `ai-generated-${Date.now()}`, // Ensure the image block has an ID.\n                        });\n                        // Replace the placeholder with the new image block.\n                        replaceBlocks(placeholderBlock.clientId, [imageBlock]);\n                    }\n                });\n            }\n        }, [selectedBlock, value.text, value.start, value.end, replaceBlocks, lastUsedProvider]);\n\n        // Determine if any text is selected.\n        const selectedText = value.text.slice(value.start, value.end).trim();\n        const isTextSelected = selectedText !== \"\";\n\n        return (\n            <BlockControls>\n                <AIImageToolbar\n                    isGenerating={isGenerating}\n                    onGenerateImage={handleGenerateImage}\n                    isTextSelected={isTextSelected}\n                />\n            </BlockControls>\n        );\n    },\n});\n","module.exports = window[\"React\"];","module.exports = window[\"wp\"][\"blockEditor\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"data\"];","module.exports = window[\"wp\"][\"element\"];","module.exports = window[\"wp\"][\"hooks\"];","module.exports = window[\"wp\"][\"richText\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};"],"names":["fetchProviders","response","wp","apiFetch","path","error","console","generateImage","prompt","provider","callback","method","data","url","alt","id","Date","now","caption","includes","Error","JSON","stringify","message","stack","Spinner","ToolbarButton","ToolbarGroup","AIImageToolbar","isGenerating","onGenerateImage","isRegenerating","onRegenerateImage","isImageBlock","isTextSelected","createElement","icon","label","onClick","disabled","useState","useEffect","Button","TextareaControl","Modal","SelectControl","AITab","onSelect","shouldDisplay","isModalOpen","setIsModalOpen","setPrompt","isLoading","setIsLoading","providers","setProviders","selectedProvider","setSelectedProvider","setError","initializeProviders","result","storedProvider","localStorage","getItem","length","setItem","err","handleGenerate","trim","media","providerOptions","map","value","charAt","toUpperCase","slice","Fragment","className","variant","title","onRequestClose","style","color","options","onChange","rows","addFilter","BlockControls","BlockEdit","props","name","setIsRegenerating","lastUsedProvider","setLastUsedProvider","initializeProvider","availableProviders","defaultProvider","dispatch","createErrorNotice","type","handleRegenerateImage","attributes","Promise","resolve","reject","setAttributes","createSuccessNotice","OriginalMediaUpload","isSingleImageBlock","allowedTypes","multiple","selectedBlock","select","getSelectedBlock","hasImageData","render","originalProps","useCallback","useSelect","useDispatch","registerFormatType","tagName","edit","isActive","setIsGenerating","replaceBlocks","handleGenerateImage","selectedText","text","start","end","placeholderBlock","blocks","createBlock","content","level","textAlign","clientId","imageBlock"],"sourceRoot":""}