{"version":3,"file":"index.js","mappings":"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","sources":["webpack://wp-ai-image-gen/./src/core-image-modifications.js","webpack://wp-ai-image-gen/external window \"React\"","webpack://wp-ai-image-gen/external window [\"wp\",\"blockEditor\"]","webpack://wp-ai-image-gen/external window [\"wp\",\"components\"]","webpack://wp-ai-image-gen/external window [\"wp\",\"data\"]","webpack://wp-ai-image-gen/external window [\"wp\",\"element\"]","webpack://wp-ai-image-gen/external window [\"wp\",\"hooks\"]","webpack://wp-ai-image-gen/external window [\"wp\",\"richText\"]","webpack://wp-ai-image-gen/webpack/bootstrap","webpack://wp-ai-image-gen/webpack/runtime/compat get default export","webpack://wp-ai-image-gen/webpack/runtime/define property getters","webpack://wp-ai-image-gen/webpack/runtime/hasOwnProperty shorthand","webpack://wp-ai-image-gen/webpack/runtime/make namespace object"],"sourcesContent":["// Import necessary WordPress components and hooks\nimport { addFilter } from '@wordpress/hooks';\nimport { useState, useEffect } from '@wordpress/element';\nimport { Button, TextControl, Modal, Spinner, SelectControl, ToolbarButton } from '@wordpress/components';\nimport { registerFormatType, toggleFormat } from '@wordpress/rich-text';\nimport { BlockControls } from '@wordpress/block-editor';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport { useCallback } from '@wordpress/element';\n\n/**\n * Fetches available providers from the server.\n * @returns {Promise<Object>} A promise that resolves to an object of provider IDs and names.\n */\nconst fetchProviders = async () => {\n    try {\n        const response = await wp.apiFetch({ path: '/wp-ai-image-gen/v1/providers' });\n        return response;\n    } catch (error) {\n        console.error('Error fetching providers:', error);\n        // Return an object with an error message that can be displayed to the user\n        return { error: 'Unable to fetch providers. Please try again later.' };\n    }\n};\n\n/**\n * Generates an AI image based on the given prompt and provider.\n * @param {string} prompt - The text prompt for image generation.\n * @param {string} provider - The selected provider ID.\n * @param {function} callback - Function to handle the generated image data.\n */\nconst generateImage = async (prompt, provider, callback) => {\n    try {\n        console.log('Generating image with prompt:', prompt, 'and provider:', provider);\n        \n        // Call the WordPress API to generate the image\n        const response = await wp.apiFetch({\n            path: '/wp-ai-image-gen/v1/generate-image',\n            method: 'POST',\n            data: { prompt, provider },\n        });\n\n        console.log('Raw API response:', response);\n\n        // If the response contains a valid URL, call the callback with image data\n        if (response && response.url) {\n            callback({\n                url: response.url,\n                alt: prompt,\n                id: response.id,\n            });\n        } else {\n            // If the response doesn't contain a URL, throw an error\n            throw new Error('Invalid response from server: ' + JSON.stringify(response));\n        }\n    } catch (error) {\n        // Log the detailed error and call the callback with an error object\n        console.error('Detailed error in generateImage:', error);\n        if (error.message) console.error('Error message:', error.message);\n        if (error.stack) console.error('Error stack:', error.stack);\n        callback({ error: error.message || 'Unknown error occurred' });\n    }\n};\n\n/**\n * AITab component for generating AI images\n * @param {Object} props - Component props\n * @param {function} props.onSelect - Function to handle selected image\n */\nconst AITab = ({ onSelect }) => {\n    // State hooks for modal, prompt, loading status, providers, and selected provider\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [prompt, setPrompt] = useState('');\n    const [isLoading, setIsLoading] = useState(false);\n    const [providers, setProviders] = useState({});\n    const [selectedProvider, setSelectedProvider] = useState('');\n    const [error, setError] = useState(null);\n\n    // Add a new state hook for the last used provider\n    const [lastUsedProvider, setLastUsedProvider] = useState('');\n\n    // Fetch providers and last used provider when component mounts\n    useEffect(() => {\n        fetchProviders().then((result) => {\n            if (result.error) {\n                setError(result.error);\n            } else {\n                setProviders(result);\n            \n                // Retrieve the last used provider from local storage\n                const storedProvider = localStorage.getItem('wpAiImageGenLastProvider');\n                if (storedProvider && result[storedProvider]) {\n                    setSelectedProvider(storedProvider);\n                    setLastUsedProvider(storedProvider);\n                } else {\n                    // If no stored provider or it's invalid, use the first available provider\n                    setSelectedProvider(Object.keys(result)[0]);\n                }\n            }\n        });\n    }, []);\n\n    // Update local storage when the selected provider changes\n    useEffect(() => {\n        if (selectedProvider) {\n            localStorage.setItem('wpAiImageGenLastProvider', selectedProvider);\n            setLastUsedProvider(selectedProvider);\n        }\n    }, [selectedProvider]);\n\n    // Handler for image generation\n    const handleGenerate = () => {\n        setIsLoading(true);\n        generateImage(prompt, selectedProvider, (media) => {\n            onSelect(media);\n            setIsLoading(false);\n            setIsModalOpen(false);\n        });\n    };\n\n    // Prepare provider options for dropdown\n    const providerOptions = Object.entries(providers).map(([id, name]) => ({ value: id, label: name }));\n\n    return (\n        <>\n            {/* Button to open the AI image generation modal */}\n            <div className=\"block-editor-media-placeholder__url-input-container\">\n                <Button\n                    variant=\"tertiary\"\n                    onClick={() => setIsModalOpen(true)}\n                    className=\"block-editor-media-placeholder__button\"\n                >\n                    Generate AI Image\n                </Button>\n            </div>\n\n            {/* Modal for AI image generation */}\n            {isModalOpen && (\n                <Modal\n                    title=\"WP AI Image Gen\"\n                    onRequestClose={() => setIsModalOpen(false)}\n                >\n                    {error ? (\n                        <p style={{ color: 'red' }}>{error}</p>\n                    ) : (\n                        <>\n                            {/* Provider dropdown (only if there's more than one provider) */}\n                            {providerOptions.length > 1 && (\n                                <SelectControl\n                                    label=\"Select Provider\"\n                                    value={selectedProvider}\n                                    options={providerOptions}\n                                    onChange={setSelectedProvider}\n                                />\n                            )}\n                            {/* Input field for the image prompt */}\n                            <TextControl\n                                label=\"Enter your image prompt\"\n                                value={prompt}\n                                onChange={setPrompt}\n                            />\n                            {/* Button to trigger image generation */}\n                            <Button\n                                variant=\"primary\"\n                                onClick={handleGenerate}\n                                disabled={isLoading || !selectedProvider || Object.keys(providers).length === 0}\n                            >\n                                {isLoading ? (\n                                    <>\n                                        <Spinner />\n                                        Generating...\n                                    </>\n                                ) : (\n                                    'Generate Image'\n                                )}\n                            </Button>\n                        </>\n                    )}\n                </Modal>\n            )}\n        </>\n    );\n};\n\n// Register the custom format type for AI image generation from selected text\nregisterFormatType('wp-ai-image-gen/custom-format', {\n    title: 'AI Image Gen',\n    tagName: 'span',\n    className: 'wp-ai-image-gen-format',\n    edit: ({ isActive, value, onChange }) => {\n        const [lastUsedProvider, setLastUsedProvider] = useState('');\n\n        const selectedBlock = useSelect(select => \n            select('core/block-editor').getSelectedBlock()\n        , []);\n\n        const { replaceBlocks } = useDispatch('core/block-editor');\n\n        // Fetch the last used provider from localStorage when the component mounts\n        useEffect(() => {\n            const storedProvider = localStorage.getItem('wpAiImageGenLastProvider');\n            if (storedProvider) {\n                setLastUsedProvider(storedProvider);\n            }\n        }, []);\n\n        const handleGenerateImage = useCallback(() => {\n            if (selectedBlock && selectedBlock.name === 'core/paragraph') {\n                const selectedText = value.text;\n                console.log('Selected text:', selectedText);\n                console.log('Using provider:', lastUsedProvider);\n                \n                generateImage(selectedText, lastUsedProvider, (result) => {\n                    if (result.error) {\n                        console.error('Image generation failed:', result.error);\n                        wp.data.dispatch('core/notices').createErrorNotice(\n                            'Failed to generate image: ' + result.error,\n                            { type: 'snackbar' }\n                        );\n                    } else {\n                        console.log('Image generated successfully:', result);\n                        const imageBlock = wp.blocks.createBlock('core/image', {\n                            url: result.url,\n                            alt: result.alt,\n                            caption: selectedText\n                        });\n                        replaceBlocks(selectedBlock.clientId, [imageBlock, selectedBlock]);\n                    }\n                });\n            } else {\n                console.log('No paragraph block selected');\n            }\n        }, [selectedBlock, value.text, replaceBlocks, lastUsedProvider]);\n\n        return (\n            <BlockControls>\n                <ToolbarButton\n                    icon=\"art\"\n                    title=\"Generate AI Image\"\n                    onClick={handleGenerateImage}\n                    isActive={isActive}\n                />\n            </BlockControls>\n        );\n    },\n});\n\n// Log that the script has loaded\nconsole.log('WP AI Image Gen: Script loaded');\n\n// Add the AI tab to the media modal using WordPress filter\naddFilter('editor.MediaUpload', 'wp-ai-image-gen/add-ai-tab', (OriginalMediaUpload) => {\n    // Return a new component that wraps the original MediaUpload\n    return (props) => {\n        return (\n            <OriginalMediaUpload\n                {...props}\n                render={(originalProps) => (\n                    <>\n                        {/* Render the original MediaUpload component */}\n                        {props.render(originalProps)}\n                        {/* Add the AITab component */}\n                        <AITab onSelect={props.onSelect} />\n                    </>\n                )}\n            />\n        );\n    };\n});\n","module.exports = window[\"React\"];","module.exports = window[\"wp\"][\"blockEditor\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"data\"];","module.exports = window[\"wp\"][\"element\"];","module.exports = window[\"wp\"][\"hooks\"];","module.exports = window[\"wp\"][\"richText\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};"],"names":["addFilter","useState","useEffect","Button","TextControl","Modal","Spinner","SelectControl","ToolbarButton","registerFormatType","toggleFormat","BlockControls","useSelect","useDispatch","useCallback","fetchProviders","response","wp","apiFetch","path","error","console","generateImage","prompt","provider","callback","log","method","data","url","alt","id","Error","JSON","stringify","message","stack","AITab","onSelect","isModalOpen","setIsModalOpen","setPrompt","isLoading","setIsLoading","providers","setProviders","selectedProvider","setSelectedProvider","setError","lastUsedProvider","setLastUsedProvider","then","result","storedProvider","localStorage","getItem","Object","keys","setItem","handleGenerate","media","providerOptions","entries","map","name","value","label","createElement","Fragment","className","variant","onClick","title","onRequestClose","style","color","length","options","onChange","disabled","tagName","edit","isActive","selectedBlock","select","getSelectedBlock","replaceBlocks","handleGenerateImage","selectedText","text","dispatch","createErrorNotice","type","imageBlock","blocks","createBlock","caption","clientId","icon","OriginalMediaUpload","props","render","originalProps"],"sourceRoot":""}